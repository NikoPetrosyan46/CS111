#include <iostream>
using namespace std;


int main() {
	int q[8][8] = {};// Initialize board
	int r = 0, c = 0;// 1st row, 1st column
	q[r][c] = 1; // start queen on upper left corner
nextCol:
	// next column
	c++;
	//goto print
	if (c == 8) goto print;
	// Otherwise start at TOP of column TOP is -1.
	r = -1;
nextRow:
	// Move to next row
	r++;
	if (r == 8) goto backtrack;
	// row
	for (int i = 0; i < c; i++) {
		if (q[r][i] == 1) goto nextRow;
	}
	// up diagonal
	for (int i = 1; ((r-i)>=0 && (c-i)>=0); i++) {
		if (q[r-i][c-i] == 1) goto nextRow;
	}
	// down diagonal
	for (int i = 1; ((r+i)<=7 && (c-i)>=0); i++) {
		if (q[r+i][c-i] == 1) goto nextRow;
	}
	q[r][c] = 1;
	goto nextCol;
backtrack:
	// Move to previous column
	c--;
	//if you have moved to left of chessboard
	//exit program
	if (c == -1) {
		cout << "No more solutions.\n";
		return 0;
	}
	// Find square in column with a queen in it and set r to row number of that square
	r = 0;
	while (q[r][c] != 1) {
		r++;
	}
	// Remove queen from current square
	q[r][c] = 0;
	//goto nextRow;
	goto nextRow;


print:
	static int numSolutions = 0;
	cout << "Solution #" << ++numSolutions << ":\n";
	for (int i = 0; i < 8; i++) {
		for (int j = 0; j < 8; j++) {
			cout << q[i][j] << " ";
		}
		cout << endl;
	}
	cout << endl;
	goto backtrack;
}
